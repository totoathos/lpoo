import wollok.game.*
import objaa.*

const personajes = game.allVisuals()

class Personajes{
    var property vida = 100
    var property dano = 50
    
    method ataque(entidad){
        entidad.vida(entidad.vida() - dano)
        self.eliminar_adversario(entidad)
        
    }
    
    method comprobar_vida(adversario){
    	return adversario.vida() <= 0
    }
    
    method eliminar_adversario(adversario){
    	if(self.comprobar_vida(adversario)){
    		Oleada.cantidad_enemigos().remove(adversario)
    		game.removeVisual(adversario)
    	}
    }   
    
}


class Heroe inherits Personajes{
    var property estamina= 50
    var property estado = "normal"
    var property position = game.center()
    const property tipo = "heroe"
    var property rangos = []
    var property direccion = "Abajo"
    
    method image() = "pj.png"
    
    method aumentar_estamina(){
    	if (estamina <= 91){estamina += 10}
    }
    
    method cambiar_direccion(estado_direccion){
    	direccion = estado_direccion
    	self.definir_rangos()
    	
    }
    
    method definir_rangos(){
	  rangos.clear()
	  
	  if(direccion == "Arriba"){
	    rangos = [game.at(position.x(),position.y()+1), game.at(position.x(),position.y()+2)]
	  }
	  
	  if(direccion == "Abajo"){
	  	//rangos = [[position.x(),position.y()-1], [position.x(),position.y()-2]]
	    rangos = [game.at(position.x(),position.y()-1), game.at(position.x(),position.y()-2)]
	  
	  }
	  
	  if(direccion == "Derecha"){
	  	
	    rangos = [game.at(position.x()+1,position.y()), game.at(position.x()+2,position.y())]
	  	}
	  
	  if(direccion == "Izquierda"){
	    rangos = [game.at(position.x()-1,position.y()), game.at(position.x()-2,position.y())]
	  	}
	  
    }
    
    method cambiar_estado(nuevo_estado){
    	estado = nuevo_estado
    }
    
    method comprobar_estamina(){
        return estamina < 10  
    }
    
    method comprobar_estado(){
    	return estado
    }
    
    method proteger(){
        self.cambiar_estado("protegido")
    }
    
    method ataque_especial(enemigo){
        self.comprobar_estamina()
        estamina -= 10
        return enemigo.vida((enemigo.vida()-(dano * 1.5)))
    }
    
    method comprobar_ataque(){
   		
   		var matar1 = game.getObjectsIn(rangos.get(0))
   		var matar2 = game.getObjectsIn(rangos.get(1))
		//if((rangos.contains(enemigo.x())) and position.y() == enemigo.y() or (rangos.contains(enemigo.y())) and position.x() == enemigo.x()){console.println("atacando");enemigo.vida(enemigo.vida() - dano)}
    	if (not(matar1.isEmpty())) {
    		matar1.forEach{a => 
    			a.vida(a.vida() - dano);
    			self.eliminar_adversario(a);
    			return a 
    	}
    	
    	
    	}
    	
    	if (not(matar2.isEmpty())){
             matar2.forEach{a => 
             	console.println(a);
    			self.eliminar_adversario(a);
    			return a
    		}
    	}
    	}
    	

    method ataque(){
    	
    	if(self.comprobar_estado() == "normal"){
    		
    		self.cambiar_estado("atacando")
    		self.comprobar_ataque()
  			//self.eliminar_adversario(entidad)
  			}		
	}
	
	method mover(destinox,destinoy){
    	self.position(game.at(destinox,destinoy))
    }
	
	
    
}

class Enemigo_Corta_Distancia inherits Personajes{
    //Por Default, asignamos que el enemigo global sea de corta distancia
    var property x = 5.randomUpTo(20).truncate(0)
    var property y = 5.randomUpTo(12).truncate(0)
    var property position = game.at(x,y)
    const property tipo = "enemigo"
    var destino_x = 0
    var destino_y = 0
    var rango = []
    
    method image() = "enemigo.png"
    
    //comprueba que si el heroe esta protegido para sacar estamina o vida
    override method ataque(entidad){
        if (entidad.estado() == "protegido"){
            entidad.estamina(entidad.estamina()-10)
        }
        entidad.vida(entidad.vida() - dano)
        entidad.cambiar_estado("danado")
        self.alejar(entidad)
    }
    
   	method alejar(entidad){
   		if(entidad.direccion()=="Derecha"){entidad.mover(entidad.position().x() + 1, entidad.position().y())} ; 
        if(entidad.direccion()=="Izquierda"){entidad.mover(entidad.position().x() - 1, entidad.position().y())} ; 
        if(entidad.direccion()=="Arriba"){entidad.mover(entidad.position().x(), entidad.position().y() - 1)} ; 
        if(entidad.direccion() == "Abajo"){entidad.mover(entidad.position().x(), entidad.position().y() + 1)}
   	}
   	
    
    method seguir(heroe){
    	var posicion_heroe = heroe.position()
    	destino_x = position.x() + if(posicion_heroe.x() > position.x()) 1 else -1
    	destino_y = position.y() + if(posicion_heroe.y() > position.y()) 1 else -1
    	
    	self.mover(destino_x,destino_y)
    }
    
    
    method mover(destinox,destinoy){
    	position = game.at(destinox,destinoy)
    }
}

class Enemigos_Larga_Distancia inherits Enemigo_Corta_Distancia{
    
    override method image() = "enemigo.jpg"
    
    override method ataque(enemigo){
        enemigo.vida(enemigo.vida() - dano)
    }
    
    
}

class Jefes inherits Personajes{
    
    
    
}


class Oleadas{
	var property cantidad_enemigos = []
	var generador_enemigos = 5.randomUpTo(6).truncate(0)
	var dificultad = 1
	var nivel = 1
	
	//comprueba el nivel de la oleada para luego aumentar la dificultad automaticamente
	method comprobar_nivel(){
		if(nivel<=4){
			dificultad = 1
			return "Principiante"
		}
		
		
		if(5<nivel and nivel<=9){
			dificultad = 1.25
			return "intermedio"
		}
		
		if(10<nivel and nivel<=15){
			dificultad = 1.5
			return "avanzado"
		}
		return " "
	}
	
	method comprobar_enemigos(){
		return cantidad_enemigos.isEmpty()
	}
	
	method avanzar_oleadas(){
		if(self.comprobar_enemigos()){
			nivel += 1
			
		}
	}
	
	//para crear los enemigos evaluamos la oleada para determinar la dificultad
	method crear_enemigos(){
		(1 .. generador_enemigos).forEach{n => cantidad_enemigos.add(new Enemigo_Corta_Distancia(vida = 75*dificultad, dano = 30*dificultad))}
	}
	
	method crear_jefes(){
		
	}
}
