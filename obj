import wollok.game.*

const personajes = game.allVisuals()

class Personajes{
    var property vida = 100
    var property dano = 50
    
    method ataque(entidad){
        entidad.vida(entidad.vida() - dano)
        self.eliminar_adversario(entidad)
    }
    
    method comprobar_vida(adversario){
    	return adversario.vida() <= 0
    }
    
    method eliminar_adversario(adversario){
    	if(self.comprobar_vida(adversario)){
    		game.removeVisual(adversario)
    	}
    }
    
}

class Rango_ataque {
	var property x = 0
	var property y = 0
	var property position = game.at(x,y)
	var property lista_rangos
	var extension_imagen
	
	method image() = extension_imagen
}


//Crear objetos a partir de la clase y darles una lista de posicion acorde
//a el tipo, ej: ataque_derecha tendra la lista de posicion de este estilo
// [x, y, x + 1, y + 1, y- 1, diag_arribader, diag_abajoder]



class Heroe inherits Personajes{
    var property estamina= 50
    var property esta_protegido = false
    var property position = game.center()
    const property tipo = "heroe"
    //var property rango_de_ataque_x_positivo = [position.x(), position.x()+1, position.x()+2]
    //var property rango_de_ataque_x_negativo = [position.x()-2, position.x()-1, position.x()]
    //var property rango_de_ataque_y_positivo = [position.y(), position.y()+1, position.y()+2]
	//var property rango_de_ataque_y_negativo = [position.y()-2, position.y()-1, position.y()]    
    var property rangos = []
    
    method image() = "pj.jpg"
    
    method aumentar_estamina(){
    	if (estamina <= 91){estamina += 10}
    }
    
    //method redefinir_rango(){ 
    //	rango_de_ataque_x_positivo = [position.x(), position.x()+1, position.x()+2]
    //	rango_de_ataque_x_negativo = [position.x()-2, position.x()-1, position.x()]
    //	rango_de_ataque_y_positivo = [position.y(), position.y()+1, position.y()+2]
	//	rango_de_ataque_y_negativo = [position.y()-2, position.y()-1, position.y()]    
    //}
    
    method anadir_rangos(){
      var diag_abajoder = game.at(position.x() + 1, position.y() - 1)
	  var diag_arribader = game.at(position.x() + 1, position.y() + 1)
	  var diag_abajoizq = game.at(position.x() - 1, position.y() - 1)
	  var diag_arribaizq = game.at(position.x() - 1, position.y() + 1)
    	(1..4).forEach{n => rangos.add(new Rango_ataque(lista_rangos = [game.at(position.x() + 1, 0), diag_arribader, diag_abajoder], extension_imagen = "derecha.jpg"),
    		new Rango_ataque(lista_rangos = [game.at(0, position.y() + 1), diag_arribader, diag_arribaizq], extension_imagen = "arriba.jpg"),
    		new Rango_ataque(lista_rangos = [game.at(position.x() - 1, 0), diag_arribaizq, diag_abajoizq], extension_imagen = "izquierda.jpg"),
    		new Rango_ataque(lista_rangos = [game.at(0, position.y() - 1), diag_abajoder, diag_abajoizq], extension_imagen = "abajo.jpg")
    		)}

//(1..4).forEach { n =>
//	        rangos.add(new Rango_ataque(lista_rangos = [game.at(position.x() + 1, 0), diag_arribader, diag_abajoder], extension_imagen = "derecha.jpg"))
//	        rangos.add(new Rango_ataque(lista_rangos = [game.at(0, position.y() + 1), diag_arribader, diag_arribaizq], extension_imagen = "arriba.jpg"))
//	        rangos.add(new Rango_ataque(lista_rangos = [game.at(position.x() - 1, 0), diag_arribaizq, diag_abajoizq], extension_imagen = "izquierda.jpg"))
//	        rangos.add(new Rango_ataque(lista_rangos = [game.at(0, position.y() - 1), diag_abajoder, diag_abajoizq], extension_imagen = "abajo.jpg"))
//	    }
    }
    
    method comprobar_estamina(){
        return estamina < 10  
    }
    
    method proteger(){
        esta_protegido = esta_protegido.negate()
    }
    
    method ataque_especial(enemigo){
        self.comprobar_estamina()
        estamina -= 10
        return enemigo.vida((enemigo.vida()-(dano * 1.5)))
    }
    
    method comprobar_ataque(enemigo){
    	rangos.forEach{n => if(n.lista_rangos().contains(enemigo.position())){enemigo.vida(enemigo.vida() - dano)}}
    }
    
    override method ataque(entidad){
    	self.anadir_rangos()
    	self.comprobar_ataque(entidad)
    }
    
}

class Enemigo_Corta_Distancia inherits Personajes{
    //Por Default, asignamos que el enemigo global sea de corta distancia
    var property x = 5.randomUpTo(20).truncate(0)
    var property y = 5.randomUpTo(12).truncate(0)
    var property position = game.at(x,y)
    const property tipo = "enemigo"
    var destino_x = 0
    var destino_y = 0
    
    method image() = "enemigo.jpg"
    
    //comprueba que si el heroe esta protegido para sacar estamina o vida
    override method ataque(entidad){
        if (entidad.esta_protegido()){
            entidad.estamina(entidad.estamina()-10)
        }
        entidad.vida(entidad.vida() - dano)
    }
    
    
    
    method seguir(heroe){
    	var posicion_heroe = heroe.position()
    	destino_x = position.x() + if(posicion_heroe.x() > position.x()) 1 else -1
    	destino_y = position.y() + if(posicion_heroe.y() > position.y()) 1 else -1
    	
    	self.mover(destino_x,destino_y)
    }
    
    
   method no_obstruir(){
   	
   	personajes.forEach{elemento => 
   		if(game.colliders(self).contains(elemento) and elemento.tipo() == "enemigo"){
   			destino_x = position.x() - 1
   			destino_y = position.y() - 1
   			self.mover(destino_x, destino_y)
   		}
   		
   	}
   }
    
    method mover(destinox,destinoy){
    	position = game.at(destinox,destinoy)
    }
}

class Enemigos_Larga_Distancia inherits Enemigo_Corta_Distancia{
    
     
    
    override method image() = "enemigo.jpg"
    
    override method ataque(enemigo){
        enemigo.vida(enemigo.vida() - dano)
    }
    
    
}

class Jefes inherits Personajes{
    
    
    
}


class Oleadas{
	var property cantidad_enemigos =[]
	var generador_enemigos = 5.randomUpTo(10).truncate(0)
	var dificultad = 1
	var nivel = 1
	
	//comprueba el nivel de la oleada para luego aumentar la dificultad automaticamente
	method comprobar_nivel(){
		if(nivel<=4){
			dificultad = 1
			return "Principiante"
		}
		
		
		if(5<nivel and nivel<=9){
			dificultad = 1.25
			return "intermedio"
		}
		
		if(10<nivel and nivel<=15){
			dificultad = 1.5
			return "avanzado"
		}
		return " "
	}
	
	method comprobar_enemigos(){
		return cantidad_enemigos.isEmpty()
	}
	
	method avanzar_oleadas(){
		if(self.comprobar_enemigos()){
			nivel += 1
		}
	}
	
	//para crear los enemigos evaluamos la oleada para determinar la dificultad
	method crear_enemigos(){
		(1 .. generador_enemigos).forEach{n => cantidad_enemigos.add(new Enemigo_Corta_Distancia(vida = 75*dificultad, dano = 30*dificultad))}
	}
	
	method crear_jefes(){
		
	}
}
